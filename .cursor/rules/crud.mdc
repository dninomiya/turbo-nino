---
description: Next.js アプリでデータ取得やデータ更新（作成、削除、変更）時のルール
alwaysApply: false
---

## データベースとの接続

packagesの drizzle を使う。

```ts
import { db } from "@workspace/database";

const updateTask = () => {
  db.update(...)
}
```

## データ取得時

1. /app/api/ に ルートハンドラー(route.ts) を作成
2. ルートハンドラー内で適切に権限検証を行う
3. /swr/ にデータ取得用の swr フックを作成し、作成したルートをfetchする
4. 関連コンポーネントからSWRフックを使用する

```ts
import { fetcher } from "@workspace/utils/fetcher";

export const useTasks = () => {
  const { data, isLoading, error } = useSWR("/api/tasks", fetcher);

  return { tasks: data, isLoading, error };
};
```

## データ更新時

1. /actions/ に サーバーアクションを作成("use server" をファイル先頭に追加)
2. サーバーアクションでは適切に権限検証を行う
3. swr フックの mutate & optimistic を使ってデータ更新とUI更新を一緒に行う

以下は optimistic を使用する例

```tsx
const createTask = useCallback(
  (data: Task) => {
    return mutate(
      async () => {
        await createTaskAction(data);
        return undefined;
      },
      {
        optimisticData: () => {
          return data;
        },
        populateCache: false, // 必要
        rollbackOnError: true, // 必要
      }
    );
  },
  [mutate, taskViewId]
);
```
